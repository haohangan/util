package wrench.zk.node;

import java.util.HashMap;
import java.util.Map;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.cache.PathChildrenCache;
import org.apache.curator.framework.recipes.cache.PathChildrenCacheListener;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.apache.curator.utils.CloseableUtils;

public class NettyServerManager {
	private String pnode;
	private String connectionString;
	
	NettyServerNode current;
	Map<String, NettyServerNode> clouds;

	static int connectionTimeoutMs = 1000;
	static int sessionTimeoutMs = 1000;

	CuratorFramework client = null;
	PathChildrenCache cache = null;

	public NettyServerManager(String pnodeName, String connectString, NettyServerNode current) {
		super();
		this.current = current;
		this.pnode = pnodeName;
		this.connectionString = connectString;
		clouds = new HashMap<>();
	}

	public void initClouds() throws Exception {
		ExponentialBackoffRetry retryPolicy = new ExponentialBackoffRetry(1000, 3);
		client = CuratorFrameworkFactory.builder().connectString(connectionString).retryPolicy(retryPolicy)
				.connectionTimeoutMs(connectionTimeoutMs).sessionTimeoutMs(sessionTimeoutMs)
				.build();
		client.start();

		cache = new PathChildrenCache(client, pnode, true);
		cache.start();
		PathChildrenCacheListener listener = new ServerNodeCacheListener();
		cache.getListenable().addListener(listener);
		
		
	}

	public void closeCloud() throws Exception {
		CloseableUtils.closeQuietly(cache);
		CloseableUtils.closeQuietly(client);
	}
}
===========================
package wrench.zk.node;

import java.util.Objects;

import com.google.common.base.Strings;
import com.google.gson.Gson;

/**
 * zookeeper中共享的信息
 * 
 * @author 976175665
 * @date 2017
 */
public class NettyServerNode {

	private String nodeName;
	private String url;
	private int connNum;// 连接的用户数目
	private String accessKey;// 连接到该服务端的验证码

	/**
	 * 构造器
	 * 
	 * @author YKSE
	 *
	 */
	public static class Builder {
		private String nodeName;
		private String url;
		private int connNum;// 连接的用户数目
		private String accessKey;// 连接到该服务端的验证码

		public static NettyServerNode buildFromJson(String json) {
			Gson gson = new Gson();
			return gson.fromJson(json, NettyServerNode.class);
		}

		public Builder setNodeName(String nodeName) {
			this.nodeName = nodeName;
			return this;
		}

		public Builder setUrl(String url) {
			this.url = url;
			return this;
		}

		public Builder setConnNum(int connNum) {
			this.connNum = connNum;
			return this;
		}

		public Builder setAccessKey(String accessKey) {
			this.accessKey = accessKey;
			return this;
		}

		public NettyServerNode build() {
			NettyServerNode node = new NettyServerNode();
			node.setNodeName(nodeName);
			node.setUrl(url);
			node.setConnNum(connNum);
			node.setAccessKey(accessKey);
			return node;
		}
	}

	public String getNodeName() {
		return nodeName;
	}

	public void setNodeName(String nodeName) {
		this.nodeName = nodeName;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public int getConnNum() {
		return connNum;
	}

	public void setConnNum(int connNum) {
		this.connNum = connNum;
	}

	public String getAccessKey() {
		return accessKey;
	}

	public void setAccessKey(String accessKey) {
		this.accessKey = accessKey;
	}

	public String toJson() throws Exception {
		if (Strings.isNullOrEmpty(nodeName) || Strings.isNullOrEmpty(url)) {
			throw new Exception("名称 或者 url 不能为空");
		}
		Gson gson = new Gson();
		return gson.toJson(this);
	}

	public NettyServerNode() {
		super();
	}

	@Override
	public int hashCode() {
		return Objects.hashCode(nodeName);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj instanceof NettyServerNode) {
			NettyServerNode that = (NettyServerNode) obj;
			return Objects.equals(this.nodeName, that.nodeName);
		}
		return false;
	}

}
===============================
package wrench.zk.node;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.recipes.cache.PathChildrenCacheEvent;
import org.apache.curator.framework.recipes.cache.PathChildrenCacheListener;
import org.apache.curator.utils.ZKPaths;

public class ServerNodeCacheListener implements PathChildrenCacheListener {


	@Override
	public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception {
		switch (event.getType()) {
		case CHILD_ADDED: {
			System.out.println("Node added: " + ZKPaths.getNodeFromPath(event.getData().getPath()));
			String json = new String(event.getData().getData());
			NettyServerNode node = NettyServerNode.Builder.buildFromJson(json);
			
			break;
		}

		case CHILD_UPDATED: {
			System.out.println("Node changed: " + ZKPaths.getNodeFromPath(event.getData().getPath()));
			break;
		}

		case CHILD_REMOVED: {
			System.out.println("Node removed: " + ZKPaths.getNodeFromPath(event.getData().getPath()));
			break;
		}
		case CONNECTION_LOST:
			break;
		case CONNECTION_RECONNECTED:
			break;
		case CONNECTION_SUSPENDED:
			break;
		case INITIALIZED:
			break;
		default:
			break;
		}
	}

}
===========
<dependency>
			<groupId>org.apache.curator</groupId>
			<artifactId>curator-recipes</artifactId>
			<version>2.12.0</version>
		</dependency>
