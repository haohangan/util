http://ninghao.net/blog/2834

JWT 标准的 Token 有三个部分：

    header
    payload
    signature

中间用点分隔开，并且都会使用 Base64 编码，所以真正的 Token 看起来像这样：

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc

Header

header 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法，比如下面类型就是 JWT，使用的算法是 HS256。

{
  "typ": "JWT",
  "alg": "HS256"
}

上面的内容要用 Base64 的形式编码一下，所以就变成这样：

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9

Payload

Payload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：

    iss：Issuer，发行者
    sub：Subject，主题
    aud：Audience，观众
    exp：Expiration time，过期时间
    nbf：Not before
    iat：Issued at，发行时间
    jti：JWT ID

比如下面这个 Payload ，用到了 iss 发行人，还有 exp 过期时间。另外还有两个自定义的字段，一个是 name ，还有一个是 admin 。

{
 "iss": "ninghao.net",
 "exp": "1438955445",
 "name": "wanghao",
 "admin": true
}

使用 Base64 编码以后就变成了这个样子：

eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ

Signature

JWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。

    header
    payload
    secret

var encodedString = base64UrlEncode(header) + "." + base64UrlEncode(payload); 
HMACSHA256(encodedString, 'secret');

处理完成以后看起来像这样：

SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc

最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc

客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。
相关链接

    http://jwt.io/
    https://github.com/firebase/php-jwt
    https://scotch.io/tutorials/the-anatomy-of-a-json-web-token
    https://github.com/auth0/jwt-decode


##############################################################

https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#the-problems-with-server-based-authentication

The server knows nothing, and that is the way it is supposed to be. The server only knows if the token is valid based upon the signature, all state is maintained on the client side.

This article is incorrect, the server is stateless, it does not store anything, not even a copy of the token in a database as stated, or otherwise. A JWT, or JSON Web Token has three parts, the crypto information, the payload, and the signature. On the server end the token is verified by re-encrypting the payload with the crypto info and checking to see if it matches the signature. Any change to the payload will negate the signature and invalidate the token.

Chris, your idea of storing a copy of the token on the server completely eliminates the statelessness of JWT security. Now if you issue the token from your main site then request details from an API that uses that token for security how will the API know if the token is valid? You would have to store that token on every server that your app will access.

The token is secure because the Salt is only known to the server so resigning a fake token is virtually impossible.

No you don't store anything in a DB. You don't want to add any user identifiable data to your JWT, things like phone numbers, addresses and such, but adding a user ID shouldn't be an issue. JWTs are stateless, in other words the server knows nothing other than what is in the JWT itself, which needs be enough to identify who you're dealing with. Once you make the jump to storing the token, or some related data in a DB you've effectively discarded the advantages of using tokens in the first place.

 token is highly secured and only the key (secret) on the server side can open it. 
