<bean id="myclazz" class="java.lang.Class" factory-method="forName">
        <constructor-arg value="java.lang.Object"/>
    </bean>

    <bean id="jsonSerializer" class="com.XX.util.RedisSessionJsonSerializer">
        <constructor-arg ref="myclazz" />
    </bean>
	
	<!--spring session -->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="3600"/>
        <property name="defaultRedisSerializer" ref="jsonSerializer"/>
    </bean>

    <!-- 让Spring Session不再执行config命令 -->
    <util:constant static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP"/>
	
	
	
package com.XX.util;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.SerializationException;

import java.nio.charset.Charset;

public class RedisSessionJsonSerializer<T> implements RedisSerializer<T> {
    private static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");

    private Class<T> clazz;
    public RedisSessionJsonSerializer(Class<T> clazz) {
        super();
        this.clazz = clazz;
    }

    @Override
    public byte[] serialize(T t) throws SerializationException {
        if (null == t)
            return new byte[0];
        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);
    }

    @Override
    public T deserialize(byte[] bytes) throws SerializationException {
        if (null == bytes || bytes.length < 1)
            return null;
        String result = new String(bytes, DEFAULT_CHARSET);
        return JSON.parseObject(result, clazz);
    }
}